scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils
library FungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg
  
  

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotFound
  | CodeTokenExists
  | CodeUnexpectedError

let makeErrorEvent =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotAuthorised    => Int32 -1
      | CodeNotFound         => Int32 -2
      | CodeTokenExists      => Int32 -3
      | CodeUnexpectedError  => Int32 -4
      end
    in
    { _eventname : "Error"; code : result_code }
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleToken
(contractOwner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32
)

(* Mutable fields *)
(* @notice: Count all NFTs assigned to a tokenOwner *)
transition balanceOf(address: ByStr20)
  optionBal <- ownedTokenCount[address];
  balance = 
    match optionBal with
    | Some bal => bal
    | None => Uint256 0
    end;
  e = {_eventname: "BalanceOfSuccess"; bal: balance};
  event e
end
