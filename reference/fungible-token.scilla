scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils
library FungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotFound
  | CodeTokenExists
  | CodeUnexpectedError

let makeErrorEvent =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotAuthorised    => Int32 -1
      | CodeNotFound         => Int32 -2
      | CodeTokenExists      => Int32 -3
      | CodeUnexpectedError  => Int32 -4
      end
    in
    { _eventname : "Error"; code : result_code }
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleToken
(contractOwner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32
)

(* Mutable fields *)

(* Emit Errors *)
procedure MakeError(err : Error)
  e = makeErrorEvent err;
  event e
end

(* @dev: Returns the number of tokens spender is allowed to spend on behalf of owner. *)
(* param tokenHolder:  Address of a token holder.                                     *)
(* param spender:      Address to be set as a spender.                                *)
transition Allowance(tokenHolder: ByStr20, spender: ByStr20)
end

(* @dev: Sets amount as the allowance of spender over the callerâ€™s tokens.  *)
(* There can only be one approved spender per token at a given time         *)
(* param tokenHolder:  Address of a token holder.                           *)
(* param spender:      Address to be set as a spender.                      *)
(* param amount:       Number of tokens to be approved for a given spender. *)
transition Approve(tokenHolder: ByStr20, spender: ByStr20, amount: Uint128)
end

(* @dev: Returns the amount of tokens in existence. *)
transition TotalSupply()
end

(* @dev: Returns the amount of tokens owned by address. *)
transition balanceOf(address: ByStr20)
  optionBal <- ownedTokenCount[address];
  balance = 
    match optionBal with
    | Some bal => bal
    | None => Uint256 0
    end;
  e = {_eventname: "BalanceOfSuccess"; bal: balance};
  event e
end
