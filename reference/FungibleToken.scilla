scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils ListUtils IntUtils
library FungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* Error events *)
type Error =
  | CodeNotAuthorized
  | CodeNotFound
  | CodeInsufficientFunds

let make_error_event =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotAuthorized     => Int32 -1
      | CodeNotFound          => Int32 -2
      | CodeInsufficientFunds => Int32 -3
      end
    in
    { _eventname : "Error"; code : result_code }

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let min = builtin lt a b in
  match min with
  | True =>
    a
  | False =>
    b
  end
    
(* A util function to test equality *)
let f_eq =
  fun (a : ByStr20) =>
  fun (b : ByStr20) =>
    builtin eq a b

(* Instantiate a type function to test membership in a list *)
let is_default_operator = @list_mem ByStr20

(* A util function to get balance of token_owner *)
let get_balance =
  fun (some_bal: Option Uint128) =>
  match some_bal with
  | Some bal => bal
  | None => Uint128 0
  end

(* Dummy user-defined ADT *)
type Unit =
| Unit

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleToken
(contract_owner: ByStr20,
  name : String,
  symbol: String,
  decimals: Uint32,
  default_operators : List ByStr20
)

(* Mutable fields *)

field total_tokens : Uint128 = Uint128 0

field balances_map: Map ByStr20 Uint128 
  = Emp ByStr20 Uint128

field operators_map: Map ByStr20 (Map ByStr20 Unit) 
  = Emp ByStr20 (Map ByStr20 Unit)

field revoked_default_operators : Map ByStr20 (Map ByStr20 Unit) 
  = Emp ByStr20 (Map ByStr20 Unit)

field allowances_map: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)

(* Procedures *)

(* Emit Errors *)
procedure IssueErrorEvent(err : Error)
  e = make_error_event err;
  event e
end

(* Mint Tokens: Can be called by the contract owner only *)
procedure AuthorizedMint(recipient: ByStr20, amount: Uint128) 
  get_bal <- balances_map[recipient];
  balance = get_balance get_bal;
  new_balance = builtin add amount balance;
  balances_map[recipient] := new_balance;
  current_total_tokens <- total_tokens;
  new_total_tokens = builtin add current_total_tokens amount;
  total_tokens := new_total_tokens;
  e = {_eventname: "MintSuccess"; recipient: recipient; minted_amount: amount; new_total_tokens: new_total_tokens};
  event e
end

(* Burn Tokens: Can be called by the contract owner only *)
procedure AuthorizedBurnIfSufficientBalance(from: ByStr20, amount: Uint128)
  get_bal <- balances_map[from];
  match get_bal with
  | None => 
    err = CodeInsufficientFunds;
    IssueErrorEvent err
  | Some bal =>
    can_burn = uint128_le amount bal;
    match can_burn with
    | False =>
      err = CodeInsufficientFunds;
      IssueErrorEvent err
    | True =>
      (* Subtract amount from 'from' *)
      new_balance = builtin sub bal amount;
      balances_map[from] := new_balance;
      current_total_tokens <- total_tokens;
      new_total_tokens = builtin sub current_total_tokens amount;
      total_tokens := new_total_tokens;
      e = {_eventname: "BurnSuccess"; from: from; amount: amount};
      event e  
      end
   end
end

(* Move Tokens if authorized *)
procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  get_from_bal <- balances_map[from];
  match get_from_bal with
  | Some bal =>
    can_do = uint128_le amount bal;
    match can_do with
    | True =>
      (* Subtract amount from "from" and add it to "to" address *)
      new_from_bal = builtin sub bal amount;
      balances_map[from] := new_from_bal;

      (* Adds amount to "to" address *)
      get_to_bal <- balances_map[to];
      new_to_bal = match get_to_bal with
      | Some bal => builtin add bal amount
      | None => amount
      end;
      
      balances_map[to] := new_to_bal;
      e = {_eventname : "MoveSuccess"; sender : from; recipient : to; amount : amount};
      event e
    | False =>
      (* Balance not sufficient *)
      err = CodeInsufficientFunds;
      IssueErrorEvent err
    end
  | None =>
    err = CodeNotFound;
    IssueErrorEvent err
  end
end

(* Approve Spender: Only token_owner can invoke *)
procedure AuthorizedApprove(spender: ByStr20, amount: Uint128)
  allowances_map[_sender][spender] := amount;
  e = {_eventname : "ApproveSuccess"; sender : _sender; spender: spender; amount : amount};
  event e
end

(* Transitions *)

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Send(to: ByStr20, amount: Uint128)
  AuthorizedMoveIfSufficientBalance _sender to amount
end

(* @dev: Moves amount tokens from token_owner to recipient. _sender must be an operator of token_owner. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                      *)
(* @param from:        Address of the token_owner whose balance is decreased.                           *)
(* @param to:          Address of the recipient whose balance is increased.                             *)
(* @param amount:      Amount of tokens to be sent.                                                     *)
transition OperatorSend(from: ByStr20, to: ByStr20, amount: Uint128)
  is_operator_approved <- exists operators_map[from][_sender];
  is_default_operator = is_default_operator f_eq _sender default_operators;
  is_revoked_operator <- exists revoked_default_operators[from][_sender];
  is_default_operator_approved = let is_not_revoked_operator = 
    negb is_revoked_operator in andb is_not_revoked_operator is_default_operator;
  is_approved = orb is_operator_approved is_default_operator_approved;
  match is_approved with
    | False =>
      err = CodeNotAuthorized;
      IssueErrorEvent err
    | True =>
      AuthorizedMoveIfSufficientBalance from to amount
   end
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  get_bal <- balances_map[from];
  match get_bal with
  | None => 
    err = CodeNotFound;
    IssueErrorEvent err
  | Some bal =>
    get_spender_allowed <- allowances_map[from][_sender];
    match get_spender_allowed with
    | None =>
      err = CodeNotAuthorized;
      IssueErrorEvent err
    | Some allowed =>
      min = min_int bal allowed;
      can_do = uint128_le amount min;
      match can_do with
      | True =>
        AuthorizedMoveIfSufficientBalance from to amount;
        new_allowed = builtin sub allowed amount;
        allowances_map[from][_sender] := new_allowed
      | False =>
        err = CodeInsufficientFunds;
        IssueErrorEvent err
      end
    end
  end
end

(* @dev: Optional transition. Mint new tokens. Only contract_owner can mint. *)
(* @param recipient: Address of the recipient whose balance is to increase.  *)
(* @param amount:    Number of tokens to be minted.                          *)
transition Mint(recipient: ByStr20, amount: Uint128)
  is_owner = builtin eq _sender contract_owner;
   match is_owner with
    | False =>
      err = CodeNotAuthorized;
      IssueErrorEvent err
    | True =>
      AuthorizedMint recipient amount
    end
end

(* @dev: Optional transition. Burn existing tokens. Only contract_owner can burn. *)
(* @param burn_account: Address of the token_owner whose balance is to decrease.  *)
(* @param amount:       Number of tokens to be burned.                            *)
transition Burn(burn_account: ByStr20, amount: Uint128)
  is_owner = builtin eq _sender contract_owner;
    match is_owner with
    | False =>
      err = CodeNotAuthorized;
      IssueErrorEvent err
    | True =>
      AuthorizedBurnIfSufficientBalance burn_account amount
    end
end

(* @dev: Make an address an operator of the caller.             *)
(* @param operator: Address to be authorize as operator or      *)
(* re-authorize as default_operator. Cannot be calling address. *)
transition AuthorizeOperator(operator: ByStr20)
  is_sender = builtin eq operator _sender;
  match is_sender with
  | True => 
    (* _sender is authorizing self as operator, return error code *)
    err = CodeNotAuthorized;
    IssueErrorEvent err
  | False =>
    is_default_operator =  is_default_operator f_eq operator default_operators;
    match is_default_operator with
    | True =>
      (* Re-authorize default_operator *)
      delete revoked_default_operators[_sender][operator];
      e = { _eventname : "ReAuthorizedDefaultOperatorSuccess"; reauthorized_default_operator : operator; authorizer : _sender};
      event e
    | False =>
      (* Authorize new operator *)
      authorize = Unit;
      operators_map[_sender][operator] := authorize;
      e = {_eventname : "AuthorizeOperatorSuccess"; authorized_operator : operator; authorizer : _sender};
      event e
    end
  end
end

(* @dev: Revoke an address from being an operator or default_operator of the caller.                  *)
(* @param operator: Address to be removed as operator or default_operator. Cannot be calling address. *)
transition RevokeOperator(operator: ByStr20)
  is_sender = builtin eq operator _sender;
  match is_sender with
  | True =>
    (* _sender is authorizing self as operator, return error code *)
    err = CodeNotAuthorized;
    IssueErrorEvent err
  | False =>
    is_default_operator = is_default_operator f_eq operator default_operators;
    match is_default_operator with
    | False =>
      (* Not default_operator, check if operator *)
      get_operator <- operators_map[_sender][operator];
      match get_operator with
      | None =>
        (* Operator to be removed not found, error *)
        err = CodeNotFound;
        IssueErrorEvent err
      | Some status =>
        delete operators_map[_sender][operator];
        e = {_eventname : "RevokeOperatorSuccess"; revoked_operator : operator; revoker : _sender};
        event e
      end
    | True =>
      (* Is default_operator, revoke default_operator authority instead *)
      verdad = Unit;
      revoked_default_operators[_sender][operator] := verdad;
      e = {_eventname : "RevokedDefaultOperatorSuccess"; revoked_default_operator : operator; revoker : _sender};
      event e
    end
  end
end

(* @dev: Emits a success event if an address is an operator or default operator of a token_owner. *)
(* @param operator:    Address of a potential operator.                                           *)
(* @param token_owner: Address of a token_owner.                                                  *)
transition IsOperatorFor(token_owner: ByStr20, operator: ByStr20)
  is_operator_approved <- exists operators_map[token_owner][operator];
  is_default_operator = is_default_operator f_eq operator default_operators;
  is_revoked_operator <- exists revoked_default_operators[token_owner][operator];
  is_default_operator_approved = let is_not_revoked_operator = 
    negb is_revoked_operator in andb is_not_revoked_operator is_default_operator;
  
  is_approved = orb is_operator_approved is_default_operator_approved;
  match is_approved with
  | False =>
    err = CodeNotAuthorized;
    IssueErrorEvent err
  | True =>
    e = {_eventname : "IsOperatorForSuccess"; token_owner: token_owner; operator : operator};
    event e
  end
end

(* @dev: Sets amount as the allowance of spender over the caller’s tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address to be set as an approved_spender.                                               *)
(* param amount:       Number of tokens to be set as allowance for the approved_spender.                       *)
transition Approve(spender: ByStr20, amount: Uint128)
  (* Checks if the _sender is approving himself *)
  is_owner = builtin eq _sender spender;
  match is_owner with
  | True =>
    err = CodeNotAuthorized;
    IssueErrorEvent err
  | False =>
    AuthorizedApprove spender amount
  end
end

(* @dev: Emits an event with the number of tokens an approved_spender is allowed to spend on behalf of the token_owner. *)
(* param token_owner:  Address of a token_owner.                                                                        *)
(* param spender:      Address of the approved_spender.                                                                 *)
transition Allowance(token_owner: ByStr20, spender: ByStr20)
  get_allowance <- allowances_map[token_owner][spender];
  match get_allowance with
  | None =>
    (* approved_spender does not exists *)
    err = CodeNotFound;
    IssueErrorEvent err
  | Some val =>
    e = {_eventname : "Allowance"; token_owner: token_owner; spender : spender;  allowance : val};
    event e
  end
end


(* @dev: Emits an event with the total amount of tokens in existence. *)
transition TotalSupply()
  current_supply <- total_tokens;
  e = {_eventname : "TotalSupply"; total_supply : current_supply};
  event e
end

(* @dev: Emits an event with the amount of tokens owned by an address. *)
transition BalanceOf(address: ByStr20)
  get_bal <- balances_map[address];
  balance = get_balance get_bal;
  e = {_eventname: "BalanceOf"; balance: balance};
  event e
end
