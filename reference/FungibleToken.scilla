scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils ListUtils
library FungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* Error events *)
type Error =
  | CodeNotAuthorised
  | CodeNotFound
  | CodeTokenExists
  | CodeUnexpectedError

let makeError =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotAuthorised    => Int32 -1
      | CodeNotFound         => Int32 -2
      | CodeTokenExists      => Int32 -3
      | CodeUnexpectedError  => Int32 -4
      end
    in
    { _eventname : "Error"; code : result_code }
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleToken
(contractOwner: ByStr20,
  name : String,
  symbol: String,
  total_tokens: Uint128,
  decimals: Uint32
)

(* Mutable fields *)

field balancesMap: Map ByStr20 Uint128 
  = Emp ByStr20 Uint128

field operatorsMap: Map ByStr20 (Map ByStr20 Bool) 
  = Emp ByStr20 (Map ByStr20 Bool)

field allowancesMap: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)

(* Procedures *)

(* Mint Tokens *)
procedure ProcedureMint(to: ByStr20, amount: Uint128) 
end

(* Burn Tokens *)
procedure ProcedureBurn(from: ByStr20, amount: Uint128)
end

(* Move Tokens *)
procedure ProcedureMove(from: ByStr20, to: ByStr20, amount: Uint128)
end

(* Approve Spender *)
procedure ProcedureApprove(tokenHolder: ByStr20, spender: ByStr20, amount: Uint128)
end

(* Emit Errors *)
procedure MakeError(err : Error)
  e = makeError err;
  event e
end

(* Transitions *)

(* @dev: Moves amount tokens from the caller’s address to the recipient.   *)
(* @param from:       Address of the sender whose balance is decreased.    *)
(* @param recipient:  Address of the recipient whose balance is increased. *)
(* @param amount:     Amount of tokens to be sent.                         *)
transition Send(from: ByStr20, recipient: ByStr20, amount: Uint128)
  ProcedureMove from recipient amount
end

(* @dev: Moves amount tokens from sender to recipient.                     *)
(* @param caller:     Address must be an operator of sender.               *)
(* @param sender:     Address of the sender whose balance is decreased.    *)
(* @param recipient:  Address of the recipient whose balance is increased. *)
(* @param amount:     Amount of tokens to be sent.                         *)
transition OperatorSend(caller: ByStr20, sender: ByStr20, to: ByStr20, amount: Uint128)
  ProcedureMove sender to amount
end

(* @dev: Burn existing tokens. Only tokenOwner or approved operator can burn a token *)
(* @param from:                             Address holding the tokens to be burned. *)
(* @param amount:                           Number of tokens to be destroyed.        *)
transition Burn(from: ByStr20, amount: Uint128)
  ProcedureBurn from amount
end

(* @dev: Burn existing tokens. Only approved operator can burn a token. *)
(* @param caller:     Address must be an operator of sender.            *)
(* @param from:       Address holding the tokens to be burned.          *)
(* @param amount:     Number of tokens to be destroyed.                 *)
transition OperatorBurn(caller: ByStr20, from: ByStr20, amount: Uint128)
  ProcedureBurn from amount
end

(* @dev: Mint new tokens. Only contractOwner can mint.                 *)
(* @param to:     Address of the recipient whose balance is increased. *)
(* @param amount: Number of tokens to be burned.                       *)
transition Mint(to: ByStr20, amount: Uint128)
 ProcedureMint to amount
end

(* @dev: Mint new tokens. Only approved operator can mint tokens.      *)
(* @param caller: Address must be an approved operator                 *)
(* @param to:     Address of the recipient whose balance is increased. *)
(* @param amount: Number of tokens to be burned.                       *)
transition OperatorMint(caller: ByStr20, to: ByStr20, amount: Uint128)
  ProcedureMint to amount
end

(* @dev: Make an address an operator of the caller.                           *)
(* @param operator: Address to be set as operator. Cannot be calling address. *)
transition AuthorizeOperator(operator: ByStr20)
  is_sender = builtin eq operator _sender;
  match is_sender with
  | True =>
    (* Operator is calling address, return error code *)
    err = CodeNotAuthorised;
    MakeError err
  | False =>
    authorize = True;
    operatorsMap[_sender][operator] := authorize;
    e = {_eventname : "AuthorizeOperatorSuccess"; operator : operator};
    event e
  end
end

(* @dev: Revoke an address from being an operator of the caller. *)
(* @param operator:         Address to be unset as operator.     *)
transition RevokeOperator(operator: ByStr20)
  getOperator <- operatorsMap[_sender][operator];
  match getOperator with
  | None =>
    (* Operator to be removed not found *)
    err = CodeNotFound;
    MakeError err
  | Some v =>
    builtin remove getOperator operatorsMap;
    e = {_eventname : "RevokeOperatorSuccess"; operator : operator};
    event e
  end
end

(* @dev: Returns true if an address is an operator of tokenHolder. *)
(* All addresses are their own operator.                           *)
(* @param operator:     Address of a potential operator.           *)
(* @param tokenHolder:  Address of a token holder.                 *)
transition IsOperatorFor(operator: ByStr20, tokenHolder: ByStr20)
end

(* @dev: Returns the list of default operators.         *)
(* These addresses are operators for all token holders. *)
transition DefaultOperators()
end

(* @dev: Move a given amount of tokens from one address another.       *)
(* @param to:     Address of the recipient whose balance is increased. *)
(* @param amount: Number of tokens to be transferred.                  *)
transition Transfer(to: ByStr20, amount: Uint128)
end

(* @dev: Move a given amount of tokens from one address another using the allowance mechanism. *)
(* param from:    Address of the sender whose balance is deccreased.                           *)
(* param to:      Address of the recipient whose balance is increased.                         *)
(* param amount:  Number of tokens to be transferred.                                          *)
transition TansferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
end

(* @dev: Returns the number of tokens spender is allowed to spend on behalf of owner. *)
(* param tokenHolder:  Address of a token holder.                                     *)
(* param spender:      Address to be set as a spender.                                *)
transition Allowance(tokenHolder: ByStr20, spender: ByStr20)
end

(* @dev: Sets amount as the allowance of spender over the caller’s tokens.  *)
(* There can only be one approved spender per token at a given time         *)
(* param tokenHolder:  Address of a token holder.                           *)
(* param spender:      Address to be set as a spender.                      *)
(* param amount:       Number of tokens to be approved for a given spender. *)
transition Approve(tokenHolder: ByStr20, spender: ByStr20, amount: Uint128)
  ProcedureApprove tokenHolder spender amount
end

(* @dev: Returns the amount of tokens in existence. *)
transition TotalSupply()
  e = {_eventname : "TotalSupply"; caller : _sender; balance : total_tokens};
  event e
end

(* @dev: Returns the amount of tokens owned by address. *)
transition balanceOf(address: ByStr20)
  optionBal <- balancesMap[address];
  balance = 
    match optionBal with
    | Some bal => bal
    | None => Uint128 0
    end;
  e = {_eventname: "BalanceOfSuccess"; bal: balance};
  event e
end
